// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherAPI.DB;

#nullable disable

namespace WeatherAPI.DB.Migrations
{
    [DbContext(typeof(AppDbCtx))]
    [Migration("20240829034902_ChangedTemperatureData")]
    partial class ChangedTemperatureData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeatherAPI.DB.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 1L,
                            Latitude = 40.7143m,
                            Longitude = -74.006m,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 2L,
                            CountryId = 1L,
                            Latitude = 34.0522m,
                            Longitude = -118.2437m,
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = 3L,
                            CountryId = 1L,
                            Latitude = 47.6062m,
                            Longitude = -122.3321m,
                            Name = "Seattle"
                        },
                        new
                        {
                            Id = 4L,
                            CountryId = 2L,
                            Latitude = 51.5085m,
                            Longitude = -0.1257m,
                            Name = "London"
                        },
                        new
                        {
                            Id = 5L,
                            CountryId = 2L,
                            Latitude = 52.2m,
                            Longitude = 0.1167m,
                            Name = "Cambridge"
                        },
                        new
                        {
                            Id = 6L,
                            CountryId = 2L,
                            Latitude = 51.7522m,
                            Longitude = -1.256m,
                            Name = "Oxford"
                        },
                        new
                        {
                            Id = 7L,
                            CountryId = 3L,
                            Latitude = 35.6895m,
                            Longitude = 139.6917m,
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 8L,
                            CountryId = 3L,
                            Latitude = 35.0211m,
                            Longitude = 135.7538m,
                            Name = "Kyoto"
                        },
                        new
                        {
                            Id = 9L,
                            CountryId = 4L,
                            Latitude = 48.8534m,
                            Longitude = 2.3488m,
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 10L,
                            CountryId = 4L,
                            Latitude = 43.297m,
                            Longitude = 5.3811m,
                            Name = "Marseille"
                        },
                        new
                        {
                            Id = 11L,
                            CountryId = 4L,
                            Latitude = 50.633m,
                            Longitude = 3.0586m,
                            Name = "Lille"
                        });
                });

            modelBuilder.Entity("WeatherAPI.DB.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Great Britain"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "France"
                        });
                });

            modelBuilder.Entity("WeatherAPI.DB.Entities.TemperatureData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TemperatureData");
                });

            modelBuilder.Entity("WeatherAPI.DB.Entities.City", b =>
                {
                    b.HasOne("WeatherAPI.DB.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WeatherAPI.DB.Entities.TemperatureData", b =>
                {
                    b.HasOne("WeatherAPI.DB.Entities.City", "City")
                        .WithMany("TemperatureData")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WeatherAPI.DB.Entities.City", b =>
                {
                    b.Navigation("TemperatureData");
                });

            modelBuilder.Entity("WeatherAPI.DB.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
